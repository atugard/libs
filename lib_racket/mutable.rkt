#lang racket


(provide mlist insert-mlist! list->mlist mlist->list mlength mmap mcadr mcdar mcaar mcaaar mcddr mcaddr mcdddr mcadddr)

(define (mlist . args)
  (if (null? args)
      null
      (mcons (car args) (apply mlist (cdr args)))))
(define (insert-mlist! x mutlist)
  (cond [(null? mutlist)
         (set! mutlist (mcons 5 mutlist))]
        [else
         (define (rec ml)
           (if (null? (mcdr ml))
               (set-mcdr! ml (mcons x null))
               (rec (mcdr ml))))
         (rec mutlist)]))
(define (list->mlist l)
  (apply mlist l))
(define (mlist->list ml)
  (if (null? ml)
      null
      (cons (mcar ml) (mlist->list (mcdr ml)))))
(define (mlength args)
  (define (iter size result)
    (if (null? result)
        size
        (iter (+ size 1) (mcdr result))))
  (iter 0 args))
(define (mmap procedure ml)
  (if (null? ml)
      '()
      (mcons (procedure (mcar ml)) (mmap procedure (mcdr ml)))))
(define (mcadr mp)
  (mcar (mcdr mp)))
(define (mcdar mp)
  (mcdr (mcar mp)))
(define (mcaar mp)
  (mcar (mcar mp)))
(define (mcaaar mp)
  (mcar (mcaar mp)))
(define (mcddr mp)
  (mcdr (mcdr mp)))
(define (mcaddr mp)
  (mcar (mcddr mp)))
(define (mcdddr mp)
  (mcdr (mcddr mp)))
(define (mcadddr mp)
  (mcar (mcdddr mp)))
